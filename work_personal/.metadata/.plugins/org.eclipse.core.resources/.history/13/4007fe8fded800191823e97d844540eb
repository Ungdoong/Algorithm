package jungol;

import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main_정올_2000_동전교환_서울8반_정택진 {
	public static int target, N;
	
	public static int calCurr(int[] nums, int curr) {
		int t = curr;
		int sum = 0;
		for(int i=N-1; i>=0; i--) {
			sum += t/nums[i];
			t = t%nums[i];
		}
		if(t != 0)	return Integer.MAX_VALUE;
		return sum;
	}

	public static void main(String[] args) throws Exception{
		System.setIn(new FileInputStream("res/input_jo_2000.txt"));
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		
		N=Integer.parseInt(br.readLine());
		StringTokenizer st = new StringTokenizer(br.readLine());
		int[] nums = new int[N];
		for(int i=0; i<N; i++)
			nums[i] = Integer.parseInt(st.nextToken());
		
		target=Integer.parseInt(br.readLine());
		
		int[] dp = new int[target+1];
		int start = nums[0];
		dp[start] = 1;
		for(int i=start+1; i<=target; i++) {
			int min = Integer.MAX_VALUE;
			for(int j=1; j<=i/2; j++) {
				if(dp[j] == 0 || dp[i-j] == 0)	continue;
				min = Math.min(min, dp[j] + dp[i-j]);
			}
			min = Math.min(min, calCurr(nums, i));
			
			if(min != Integer.MAX_VALUE)
				dp[i] = min;
		}
		
		if(dp[target] == 0)
			System.out.println("impossible");
		else
			System.out.println(dp[target]);
		System.out.println(Arrays.toString(dp));
	}
}
